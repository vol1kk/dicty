generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

model Meaning {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  definition String
  example    String?
  categoryId String?   @db.ObjectId
  category   Category? @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}

model Category {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  meanings Meaning[]
  wordId   String?   @db.ObjectId
  word     Word?     @relation(fields: [wordId], references: [id], onDelete: Cascade)
}

model Word {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  transcription  String
  categories     Category[]
  synonyms       String[]
  language       String?
  dictionary     String?
  shareCode      String?
  easinessFactor Float      @default(2.5)
  repetitions    Int        @default(0)
  interval       DateTime   @default(now())
  createdAt      DateTime?  @default(now())
  createdById    String?    @db.ObjectId
  createdBy      User?      @relation(fields: [createdById], references: [id], onDelete: Cascade)
}

// Necessary for Next auth
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  words         Word[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
